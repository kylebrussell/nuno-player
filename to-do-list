src/core/audio/audio_buffer.c:


src/core/audio/audio_pipeline.c:
- Implement end-of-playlist handling
- Handle real-time sample rate or bit-depth reconfiguration: if the user changes to a new track with different format mid-playback, drain or re-init the buffer before continuing.

src/core/audio/format_handlers.c:
- Add FLAC sync block detection (0xFFF8)
- Implement FLAC metadata block parsing:
  - STREAMINFO block parsing (required)
  - SEEKTABLE block parsing (for seeking)
  - VORBIS_COMMENT block parsing (for tags)
  - PICTURE block parsing (optional)
- Add FLAC frame header parsing:
  - Frame sync code validation
  - Block size parsing
  - Sample rate parsing
  - Channel assignment parsing
  - Sample size parsing
  - Frame number/sample number parsing
- Implement CRC checking for frame validation
- Add helper functions for reading variable-length rice coding parameters
- Create utilities for handling FLAC's fixed/LPC prediction
- Add residual coding parsing support

include/nuno/format_handlers.h:
- Define FLAC-specific structures:
  - FLAC_StreamInfo structure
  - FLAC_FrameHeader structure
  - FLAC_Subframe structure
  - FLAC_SeekTable structure
- Add FLAC-related constants:
  - Block type definitions
  - Frame sync code
  - Sample size constants
  - Channel assignment values
- Define interfaces for FLAC operations:
  - Metadata block parsing functions
  - Frame parsing functions
  - Subframe parsing functions
  - CRC calculation utilities

include/nuno/format_decoder.h:
- Define buffer requirements per format
- Create error handling structures
- Add FLAC-specific error codes and handling:
  - Invalid FLAC stream
  - Unsupported FLAC feature
  - Frame decode error
  - CRC mismatch
- Define decoder configuration and capabilities:
  - Memory buffer size requirements per format
  - Format-specific configuration options
  - Seeking behavior settings
  - Error handling preferences
  - Maximum supported sample rates
  - Supported bit depths
  - Seeking capabilities

src/core/audio/format_decoder.c:
- Add FLAC decoder state management:
  - Track current frame position
  - Store stream parameters
  - Maintain decode buffer state
- Implement FLAC format detection in format_decoder_open
- Add FLAC-specific initialization:
  - Allocate decode buffers
  - Initialize subframe buffers
  - Set up prediction contexts
- Create FLAC frame decoding pipeline:
  - Frame synchronization
  - Header decoding
  - Subframe decoding
  - Sample reconstruction
  - Inter-channel decorrelation
- Implement efficient sample format conversion:
  - FLAC internal format to float conversion
  - Handle different bit depths (16/24 bit)
- Add seeking support:
  - Use SEEKTABLE if available
  - Implement binary search seeking if no SEEKTABLE
  - Ensure frame alignment when seeking
- Implement proper cleanup in format_decoder_close for FLAC resources

tests/core/filesystem_tests.c:
- Create test suite for filesystem operations
- Add mock filesystem for testing
- Test error conditions and recovery
- Test partial reads and EOF conditions
- Test seek operations
- Test file format detection
- Add stress tests for concurrent operations
- Add performance benchmarks for read operations

src/platform/main.c:
- Implement power management initialization
- Add system diagnostics/health monitoring
- Add USB initialization
- Implement graceful shutdown handling
- Add system recovery from hard faults
- Create task monitoring system
- Configure DMA priorities and interrupt levels

tests/platform/platform_tests.c:
- Buffer management tests
- Add DMA tests
- Add unit tests for DAC operations
- Add GPIO tests

tests/mocks/stm32h7xx_hal_mock.c:
- Create mock implementation of STM32 HAL functions
- Add mock GPIO functions
- Implement mock I2C interface
- Add mock DMA functions
- Create mock timer functions
- Add mock interrupt handling

Build System Integration:
- Integrate FreeRTOS kernel into CMake build:
  - Add FreeRTOS source files to build targets
  - Configure FreeRTOS kernel settings
  - Set up portable layer for target architecture
  - Add FreeRTOS include paths
  - Configure heap implementation selection
  - Set up RTOS configuration header
  - Add minimp3 library:
    - Download minimp3.h and minimp3_ex.h
    - Add to external/minimp3/
    - Update CMake to include minimp3 headers
    - Add license file and attribution
  - Add libFLAC dependency:
  - Download libFLAC source
  - Add to external/libflac/
  - Configure build options
  - Add include paths
  - Update CMake configuration
  - Add license and attribution  

src/core/database/db_init.c:
- Implement SQLite database initialization
- Create tables for songs, artists, albums
- Add indices for fast searching
- Implement playlist management
- Add play history tracking

include/nuno/power.h:
- Define power states
- Add battery monitoring interface
- Define charging state management
- Add thermal monitoring interface

src/platform/power.c:
- Implement power state transitions
- Add battery level monitoring
- Implement charging control
- Add thermal management
- Implement deep sleep mode

src/platform/usb.c:
- Implement mass storage device mode
- Add custom protocol handlers
- Implement sync protocol
- Add error recovery mechanisms

tests/core/audio_tests.c:
- Add audio pipeline tests
- Test buffer underrun handling
- Add format decoder tests
- Test gapless playback
- Add performance benchmarks
- Add unit tests for pipeline state change callbacks

tests/ui/menu_tests.c:
- Test scroll performance
- Add animation timing tests
- Test menu navigation
- Add stress tests for UI
- Test click wheel responsiveness

tests/core/audio/format_handlers_tests.c:
- Add FLAC metadata parsing tests:
  - Test all metadata block types
  - Test invalid metadata blocks
  - Test metadata block chaining
- Create frame parsing tests:
  - Test various frame configurations
  - Test invalid frame headers
  - Test CRC validation
- Add subframe decoding tests:
  - Test constant subframes
  - Test fixed prediction
  - Test LPC prediction
  - Test residual decoding
- Implement seeking tests:
  - Test seek table accuracy
  - Test binary search seeking
  - Test seek to specific samples

tests/core/audio/format_decoder_tests.c:
- Add FLAC decoder initialization tests:
  - Test valid file detection
  - Test invalid file handling
  - Test resource allocation
- Create decoding pipeline tests:
  - Test full frame decoding
  - Test sample reconstruction
  - Test channel correlation
- Implement format conversion tests:
  - Test different bit depth handling
  - Test float conversion accuracy
- Add performance benchmarks:
  - Measure decode speed
  - Compare memory usage
  - Profile seeking performance
