src/core/audio/audio_buffer.c:
- Create an explicit "update" or "tick" function (e.g., AudioBuffer_Update()) that the pipeline can call periodically or after DMA callbacks, to keep buffer state transitions in sync with pipeline state.
- Add a new AudioBuffer_Seek(position_in_samples) to handle partial flush or refill when seeking. This should invalidate or reset buffer contents, call FileSystem_Seek(), then preload from the new offset.

src/core/audio/audio_pipeline.c:
- Implement end-of-playlist handling
- Improve coordination between pipeline states (PLAYING, PAUSED, CROSSFADE_IN_PROGRESS) and the buffer’s states, so they never drift out of alignment.
- Handle real-time sample rate or bit-depth reconfiguration: if the user changes to a new track with different format mid-playback, drain or re-init the buffer before continuing.
- Fade out smoothly on AudioPipeline_Stop() to avoid abrupt audio pops, especially in a “premium” user experience scenario.
- Decide how the pipeline calls AudioBuffer_Update(): in the main loop, in an RTOS task, or after each half/full DMA transfer. A unified approach avoids partial or duplicate updates.
- Integrate seeking logic more tightly with AudioBuffer_Seek(). Possibly define a pipeline-level “seek to sample/frame” call that stops DMA, re-seeks, and restarts in a seamless flow.

src/core/audio/format_handlers.c:
- Add FLAC frame decoding support
- Add FLAC metadata block parsing
- Implement frame-aligned seeking for both formats
- Add support for different FLAC compression levels
- Implement proper error handling for corrupt frames

include/nuno/format_decoder.h:
- Define buffer requirements per format
- Create error handling structures

src/core/audio/format_decoder.c:
- Implement FLAC decoder integration
- Implement more robust error handling

tests/core/filesystem_tests.c:
- Create test suite for filesystem operations
- Add mock filesystem for testing
- Test error conditions and recovery
- Test partial reads and EOF conditions
- Test seek operations
- Test file format detection
- Add stress tests for concurrent operations
- Add performance benchmarks for read operations

src/platform/main.c:
- Implement power management initialization
- Add system diagnostics/health monitoring
- Create UI task for menu handling
- Add USB initialization
- Implement graceful shutdown handling
- Add system recovery from hard faults
- Create task monitoring system
- Configure DMA priorities and interrupt levels

tests/platform/platform_tests.c:
- Buffer management tests
- Add DMA tests
- Add unit tests for DAC operations
- Add GPIO tests

tests/mocks/stm32h7xx_hal_mock.c:
- Create mock implementation of STM32 HAL functions
- Add mock GPIO functions
- Implement mock I2C interface
- Add mock DMA functions
- Create mock timer functions
- Add mock interrupt handling

Build System Integration:
- Integrate FreeRTOS kernel into CMake build:
  - Add FreeRTOS source files to build targets
  - Configure FreeRTOS kernel settings
  - Set up portable layer for target architecture
  - Add FreeRTOS include paths
  - Configure heap implementation selection
  - Set up RTOS configuration header
  - Add minimp3 library:
    - Download minimp3.h and minimp3_ex.h
    - Add to external/minimp3/
    - Update CMake to include minimp3 headers
    - Add license file and attribution

src/core/database/db_init.c:
- Implement SQLite database initialization
- Create tables for songs, artists, albums
- Add indices for fast searching
- Implement playlist management
- Add play history tracking

include/nuno/power.h:
- Define power states
- Add battery monitoring interface
- Define charging state management
- Add thermal monitoring interface

src/platform/power.c:
- Implement power state transitions
- Add battery level monitoring
- Implement charging control
- Add thermal management
- Implement deep sleep mode

src/platform/usb.c:
- Implement mass storage device mode
- Add custom protocol handlers
- Implement sync protocol
- Add error recovery mechanisms

tests/core/audio_tests.c:
- Add audio pipeline tests
- Test buffer underrun handling
- Add format decoder tests
- Test gapless playback
- Add performance benchmarks
- Add unit tests for pipeline state change callbacks

tests/ui/menu_tests.c:
- Test scroll performance
- Add animation timing tests
- Test menu navigation
- Add stress tests for UI
- Test click wheel responsiveness


# Focus Areas by Priority

High Priority:
- Audio pipeline implementation
- Click wheel input processing
- Basic menu navigation
- DAC driver implementation

Medium Priority:
- Power management
- Database initialization
- Format decoders
- USB communication

Low Priority:
- Advanced UI animations
- Extended playback features
- Additional audio format support